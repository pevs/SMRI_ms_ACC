WARNING: unknown option '--max-mem-size=350G'


R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #!/usr/bin/env r
> 
> ### Alexis Norris
> ### created: 1 August 2016
> ### modified: 3 March 2018 *for HPC, which needs more threads*
> 
> print(Sys.time())
[1] "2018-03-09 20:47:50 EST"
> library(derfinder)
> 
> ### Generate full coverage
> # Load chromosome information used in assembly
> chrom.sizes <- read.delim("/mnt/data/RNASeq/methods/references/hg19/hg19.chrom.sizes", header = FALSE)
> print(head(chrom.sizes))
    V1        V2
1 chr1 249250621
2 chr2 243199373
3 chr3 198022430
4 chr4 191154276
5 chr5 180915260
6 chr6 171115067
> 
> # Remove unmapped contigs
> chrom.sizes <- chrom.sizes[-grep("_", chrom.sizes$V1), ]
> 
> 
> # ACC (75bp) ------------------------------------------
> # Locate bigwig files
> # .bai files must also be in the directory and have identical names
> #files_ACC <- rawFiles("/mnt/data/RNASeq/data/Stanley/all_hisat_hg19/derfinder/bigwigs/ACC", samplepatt = "bw", fileterm = NULL)
> #names(files_ACC) <- gsub(".bw", "", names(files_ACC))
> 
> # Load full coverage from bigwig files
> #fullCov_ACC <- fullCoverage(files = files_ACC, chrs = as.character(chrom.sizes$V1), chrlens = chrom.sizes$V2, verbose = TRUE, mc.cores.load = 10)
> #saveRDS(fullCov_ACC, "fullCov_ACC.rds")
> 
> ### Filter coverage to reduce computational time of `regionMatrix`
> # Using mean coverage of 5 reads (mean across all samples), for a region to be included as an expressed region  
> #filteredCov_ACC <- lapply(fullCov_ACC, filterData, returnMean = TRUE, filter = "mean", cutoff = 5, verbose = TRUE)
> #saveRDS(filteredCov_ACC, "filteredCov_ACC.rds")
> 
> ### Calculate expressed region counts  
> # L = read length (here, 75bp)
> #regionMat75_ACC <- regionMatrix(filteredCov_ACC, L = 75, runFilter = FALSE, verbose = TRUE)
> #saveRDS(regionMat75_ACC, "regionMat_ACC_75bp.rds")
> #rm(fullCov_ACC)
> #rm(filteredCov_ACC)
> #rm(regionMat75_ACC)
> 
> # HPC (100bp) ------------------------------------------
> # Locate bigwig files
> # .bai files must also be in the directory and have identical names
> #files_HPC <- rawFiles("/mnt/data/RNASeq/data/Stanley/all_hisat_hg19/derfinder/bigwigs/HPC", samplepatt = "bw", fileterm = NULL)
> #names(files_HPC) <- gsub(".bw", "", names(files_HPC))
> 
> # Load full coverage from bigwig files
> #fullCov_HPC <- fullCoverage(files = files_HPC, chrs = as.character(chrom.sizes$V1), chrlens = chrom.sizes$V2, verbose = TRUE, mc.cores.load = 10)
> #saveRDS(fullCov_HPC, "fullCov_HPC.rds")
> 
> ### Filter coverage to reduce computational time of `regionMatrix`
> # Using mean coverage of 5 reads (mean across all samples), for a region to be included as an expressed region  
> #filteredCov_HPC <- lapply(fullCov_HPC, filterData, returnMean = TRUE, filter = "mean", cutoff = 5, verbose = TRUE)
> #saveRDS(filteredCov_HPC, "filteredCov_HPC.rds")
> 
> # read in previously saved
> filteredCov_HPC <- readRDS("filteredCov_HPC.rds")
> 
> # HPC previously freezed here, at chr7, last message was:
> #2018-02-28 05:13:47 getRegionCoverage: processing chr7
> 
> ### Calculate expressed region counts  
> # L = read length (here, 100bp)
> regionMat100_HPC <- regionMatrix(
+ 	filteredCov_HPC, 
+ 	L = 100, 
+ 	runFilter = FALSE, 
+ 	returnBP = FALSE, # don't need this, and might speed it up?!
+ 	verbose = TRUE)
2018-03-09 20:53:02 regionMatrix: processing chr1
2018-03-09 20:53:02 findRegions: identifying potential segments
2018-03-09 20:53:02 findRegions: segmenting F-stats information
2018-03-09 20:53:02 .getSegmentsRle: segmenting with cutoff(s) 0
2018-03-09 20:53:10 findRegions: identifying candidate regions
2018-03-09 20:53:10 findRegions: identifying region clusters
2018-03-09 20:54:22 getRegionCoverage: processing chr1
2018-03-09 22:12:25 getRegionCoverage: done processing chr1
